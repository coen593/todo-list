(()=>{var t={305:t=>{t.exports=function(t,e,n,a){const r=document.createElement(t);if(e)for(let t of e)r.classList.add(t);if(n&&(r.innerHTML=n),a)for(let t in a)r.setAttribute(t,a[t]);return r}}},e={};function n(a){var r=e[a];if(void 0!==r)return r.exports;var i=e[a]={exports:{}};return t[a](i,i.exports,n),i.exports}(()=>{"use strict";class t{constructor(t,e,n,a,r){this.title=t,this.description=e,this.dueDate=n,this.priority=a,this.done=!1,this.project=r}setTitle(t){this.title=t}getTitle(){return this.title}setDescription(t){this.description=t}getDescription(){return this.description}setDue(t){this.dueDate=t}getDue(){return this.dueDate}setPriority(t){this.priority=t}getPriority(){return this.priority}setProject(t){this.project=t}getProject(){return this.project}setDone(){this.done=!this.done}}class e{constructor(t){this.title=t,this.tasks=[]}getProject(){return this.title}setProject(t){this.title=t}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((e=>e.getTitle()==t.title))}addTask(t){return this.tasks.push(t)}removeTask(t){const e=this.tasks.findIndex((e=>e.getTitle()==t.title));this.tasks.splice(e,1)}}class a{constructor(){this.projects=[]}addProject(t){return this.projects.push(t)}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getProject()==t))}removeProject(t){const e=this.projects.findIndex((e=>e==t));this.projects.splice(e,1)}deleteProject(t){const e=this.projects.find((e=>e.getProject()==t));this.projects.splice(this.projects.indexOf(e),1)}}class r{static saveList(t){localStorage.setItem("list",JSON.stringify(t))}static getList(){const n=Object.assign(new a,JSON.parse(localStorage.getItem("list")));return n.setProjects(n.getProjects().map((t=>Object.assign(new e,t)))),n.getProjects().forEach((e=>e.setTasks(e.getTasks().map((e=>Object.assign(new t,e)))))),n}static getProjects(){return r.getList().getProjects()}static getProject(t){return r.getList().getProject(t)}static getTask(t){const e=r.getProjects();for(let n of e){const e=n.getTasks();for(let a of e)if(a.title==t.title&&n.title==a.project)return a}}static addProject(t){const n=r.getProjects();for(let e of n)if(e.title==t)return 0;const a=r.getList(),i=new e(t,[]);return a.addProject(i),r.saveList(a),1}static checkTaskExists(t){const e=r.getList().getProject(t.project).getTasks();for(let n of e)if(n.title==t.title)return!0;return!1}static addTask(e){if(this.checkTaskExists(e))return 0;const n=r.getList(),a=n.getProject(e.project),i=new t(e.title,e.description,e.date,e.priority,e.project);return a.addTask(i),r.saveList(n),1}static showTasks(t,e){"string"==typeof e&&(e=r.getProject(e));let n=[];return"all"==t?r.getProjects().forEach((t=>{n=[...n,...t.getTasks()]})):"p"==t&&(n=e.tasks),n}static setTaskDone(t){const e=r.getList();e.getProject(t.project).getTask(t).setDone(),r.saveList(e)}static deleteTask(t){const e=r.getList();e.getProject(t.project).removeTask(t),r.saveList(e)}static editTask(t,e){return t.title===e.title&&t.project===e.project||!r.checkTaskExists(t)?(r.deleteTask(e),r.addTask(t),1):0}static deleteProject(t){const e=r.getList();e.deleteProject(t),r.saveList(e)}}const i=n(305),o=n(305),s=n(305),d=n(305),l=n(305),c=n(305),u=n(305);function p(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function h(t){p(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function m(t,e){p(2,arguments);var n=h(t),a=h(e),r=n.getTime()-a.getTime();return r<0?-1:r>0?1:r}function f(t,e){p(2,arguments);var n=h(t),a=h(e),r=n.getFullYear()-a.getFullYear(),i=n.getMonth()-a.getMonth();return 12*r+i}function g(t){p(1,arguments);var e=h(t);return e.setHours(23,59,59,999),e}function v(t){p(1,arguments);var e=h(t),n=e.getMonth();return e.setFullYear(e.getFullYear(),n+1,0),e.setHours(23,59,59,999),e}function k(t){p(1,arguments);var e=h(t);return g(e).getTime()===v(e).getTime()}function b(t,e){p(2,arguments);var n,a=h(t),r=h(e),i=m(a,r),o=Math.abs(f(a,r));if(o<1)n=0;else{1===a.getMonth()&&a.getDate()>27&&a.setDate(30),a.setMonth(a.getMonth()-i*o);var s=m(a,r)===-i;k(h(t))&&1===o&&1===m(t,r)&&(s=!1),n=i*(o-Number(s))}return 0===n?0:n}function y(t,e){return p(2,arguments),h(t).getTime()-h(e).getTime()}var j={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(t){return t<0?Math.ceil(t):Math.floor(t)}};function w(t){return t?j[t]:j.trunc}function C(t,e,n){p(2,arguments);var a=y(t,e)/1e3;return w(null==n?void 0:n.roundingMethod)(a)}var P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function D(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,a=t.formats[n]||t.formats[t.defaultWidth];return a}}var T,M={date:D({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:D({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:D({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function x(t){return function(e,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=r.width?String(r.width):i;a=t.formattingValues[o]||t.formattingValues[i]}else{var s=t.defaultWidth,d=r.width?String(r.width):t.defaultWidth;a=t.values[d]||t.values[s]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function S(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;var o,s=i[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(d)?W(d,(function(t){return t.test(s)})):E(d,(function(t){return t.test(s)}));o=t.valueCallback?t.valueCallback(l):l,o=n.valueCallback?n.valueCallback(o):o;var c=e.slice(s.length);return{value:o,rest:c}}}function E(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function W(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const A={code:"en-US",formatDistance:function(t,e,n){var a,r=P[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:M,formatRelative:function(t,e,n,a){return L[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:x({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:x({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:x({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:x({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:x({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(T.matchPattern);if(!n)return null;var a=n[0],r=t.match(T.parsePattern);if(!r)return null;var i=T.valueCallback?T.valueCallback(r[0]):r[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(a.length);return{value:i,rest:o}}),era:S({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:S({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:S({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:S({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:S({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function F(t){return function(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e=e||{})Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}({},t)}function q(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var X=1440,N=43200;function O(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(2,arguments);var a=n.locale||A;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var r=m(t,e);if(isNaN(r))throw new RangeError("Invalid time value");var i,o,s=F(n);s.addSuffix=Boolean(n.addSuffix),s.comparison=r,r>0?(i=h(e),o=h(t)):(i=h(t),o=h(e));var d,l=C(o,i),c=(q(o)-q(i))/1e3,u=Math.round((l-c)/60);if(u<2)return n.includeSeconds?l<5?a.formatDistance("lessThanXSeconds",5,s):l<10?a.formatDistance("lessThanXSeconds",10,s):l<20?a.formatDistance("lessThanXSeconds",20,s):l<40?a.formatDistance("halfAMinute",null,s):l<60?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",1,s):0===u?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",u,s);if(u<45)return a.formatDistance("xMinutes",u,s);if(u<90)return a.formatDistance("aboutXHours",1,s);if(u<X){var f=Math.round(u/60);return a.formatDistance("aboutXHours",f,s)}if(u<2520)return a.formatDistance("xDays",1,s);if(u<N){var g=Math.round(u/X);return a.formatDistance("xDays",g,s)}if(u<86400)return d=Math.round(u/N),a.formatDistance("aboutXMonths",d,s);if((d=b(o,i))<12){var v=Math.round(u/N);return a.formatDistance("xMonths",v,s)}var k=d%12,y=Math.floor(d/12);return k<3?a.formatDistance("aboutXYears",y,s):k<9?a.formatDistance("overXYears",y,s):a.formatDistance("almostXYears",y+1,s)}function Y(t,e){return p(1,arguments),O(t,Date.now(),e)}const J=n(305),_=n(305);(()=>{const t=document.querySelector(".container");t.appendChild(function(){const t=o("header"),e=o("div",["close-menu","hamburger"],"&times;",{tabindex:"0"}),n=o("div",["open-menu","hamburger"],"&#9776;",{tabindex:"0"});t.appendChild(e),t.appendChild(n),n.addEventListener("click",(()=>tt("close"))),e.addEventListener("click",(()=>tt("open")));const a=o("h1",["header-logo"],"Do-it-all");return t.appendChild(a),a.addEventListener("click",(()=>Q("all"))),t}()),t.appendChild(function(){const t=s("div",["sidebar"]),e=s("button",["btn","add-task"],"Add Task",{id:"add-task"});t.appendChild(e),e.addEventListener("click",(()=>I()));const n=s("h3",null,"Projects");t.appendChild(n);const a=s("ul",["project-list"]);t.appendChild(a);const r=s("button",["btn","add-project"],"Add Project",{id:"add-project"});return t.appendChild(r),r.addEventListener("click",(()=>$())),t}()),t.appendChild(d("section",["content"]))})();const I=t=>{const e=document.querySelector(".container");e.classList.contains("hasForm")||(e.classList.add("hasForm"),e.appendChild(function(t){const e=i("form",["new-task-form"]),n=i("legend",null,"Add your new task");e.appendChild(n);const a=new Image;a.src="./static/x.svg",e.appendChild(a),a.addEventListener("click",(()=>H()));const o=i("label",null,"Task Name",{for:"new-task-name"}),s=i("input",["new-task-input","form-input"],null,{id:"new-task-name",required:"true",type:"text",name:"title",autocomplete:"off"});e.appendChild(o),e.appendChild(s);const d=i("p",["name-taken","error-message"],"This task name is already taken!",{id:"task-name-error"});d.style.display="none",e.appendChild(d);const l=i("label",null,"Description",{for:"new-task-description"}),c=i("textarea",["new-task-input","form-input"],null,{id:"new-task-description",rows:"6",name:"description",maxlength:"500"});e.appendChild(l),e.appendChild(c);const u=i("label",null,"Due Date",{for:"new-task-date"}),p=i("input",["new-task-input","form-input"],null,{id:"new-task-date",type:"date",name:"date"});e.appendChild(u),e.appendChild(p);const h=i("label",null,"Project",{for:"Project"}),m=i("select",["new-task-input","form-input"],null,{id:"new-task-project",name:"project"}),f=r.getProjects(),g=i("option",null,"-- no project --",{value:"_no-project"});m.appendChild(g);for(let e of f)if("_no-project"!==e.title){const n=i("option",null,e.title,{value:e.title});t&&e.title==t&&n.setAttribute("selected","selected"),m.appendChild(n)}e.appendChild(h),e.appendChild(m);const v=i("label",null,"Priority",{for:"new-task-priority"}),k=i("select",["new-task-input",["form-input"]],null,{id:"new-task-priority",name:"priority"});for(let t of[1,2,3]){const e=i("option",null,t,{value:t.toString()});k.appendChild(e)}e.appendChild(v),e.appendChild(k);const b=i("button",["btn","new-task-btn"],"Add Task",{type:"submit",id:"new-task-btn"});return e.appendChild(b),e.addEventListener("submit",(t=>{t.preventDefault();const e=Object.fromEntries(new FormData(t.target));0==r.addTask(e)?d.style.display="block":(H(),B(),"_no-project"==e.project?Q("all"):Q(null,r.getProject(e.project)))})),e}(t)))},$=()=>{const t=document.querySelector(".container");t.classList.contains("hasForm")||(t.classList.add("hasForm"),t.appendChild(function(){const t=l("form",["new-project-form"]),e=l("legend",null,"Add your new project");t.appendChild(e);const n=new Image;n.src="./static/x.svg",t.appendChild(n),n.addEventListener("click",(()=>H()));const a=l("label",null,"Project Name",{for:"new-project-name"}),i=l("input",["new-task-input","form-input"],null,{id:"new-task-name",required:"true",type:"text",name:"title",autocomplete:"off"});t.appendChild(a),t.appendChild(i);const o=l("p",["name-taken","error-message"],"This project name is already taken!",{id:"project-name-error"});o.style.display="none",t.appendChild(o);const s=l("button",["btn","new-task-btn"],"Add Project",{type:"submit",id:"new-task-btn"});return t.appendChild(s),s.addEventListener("click",(t=>{t.preventDefault(),0==r.addProject(i.value)?o.style.display="block":(H(),B())})),t}()))},H=()=>{document.querySelector(".container").classList.remove("hasForm"),document.querySelector("form").remove()},z=t=>{for(;t.firstChild;)t.removeChild(t.firstChild)},B=()=>{const t=r.getProjects(),e=document.querySelector(".project-list");z(e),function(t,e){let n;for(let a of t)if("_no-project"!==a.title){const t=_("li",["project-link"],a.title,{tabindex:"0"});e.appendChild(t),t.addEventListener("click",(()=>Q("p",a)))}else n=a;e.appendChild(_("hr"));const a=_("li",["project-link","misc-project-link"],"Miscellaneous tasks",{tabindex:"0"});e.appendChild(a),a.addEventListener("click",(()=>Q("p",n)))}(t,e)},Q=(t,e)=>{const n=document.querySelector(".content");t||(t=R()),z(n);const a=function(t,e){const n=u("div",["header-div"]);let a;"all"==t?a=u("h2",["content-header",t],"All tasks"):"p"==t&&("string"!=typeof e&&(e=e.title),a=u("h2",["content-header",t],"_no-project"==e?"Miscellaneous tasks":`${e} - Tasks`)),n.appendChild(a);const r=u("div",["button-div"]),i=u("button",["btn","add-task"],"Add Task",{id:"add-task"});if(r.appendChild(i),"p"==t?i.addEventListener("click",(()=>I(e))):i.addEventListener("click",(()=>I())),"p"==t&&"_no-project"!=e){const t=u("button",["delete-project-button",".btn"],"Delete project");r.appendChild(t),t.addEventListener("click",(()=>Z(e)))}return n.appendChild(r),n}(t,e),i=function(t){t.sort(((t,e)=>new Date(t.dueDate)-new Date(e.dueDate)||t.priority-e.priority));const e=J("ul",["task-list"]);for(let n of t){const t=J("li",["task-item"],null,{tabindex:"0"}),a=J("div",["task-left"]),r=J("div",["task-right"]),i=J("div",["task-bottom"]),o=J("img",["item-check"],null,{tabindex:"0",src:"./static/checked.svg",alt:`Checkbox ${n.title}`}),s=J("img",["item-uncheck"],null,{tabindex:"0",src:"./static/unchecked.svg",alt:`Checkbox ${n.title}`});a.appendChild(o),a.appendChild(s),n.done&&t.classList.add("done");const d=J("span",["item-text"],n.title);if(a.appendChild(d),n.dueDate){const t=J("span",["item-date"],Y(new Date(n.dueDate),{addSuffix:!0}));r.appendChild(t)}const l=J("img",["item-edit"],null,{tabindex:"0",src:"./static/edit.svg",alt:`Edit ${n.title}`});r.appendChild(l);const c=J("img",["item-delete"],null,{tabindex:"0",src:"./static/delete.svg",alt:`Delete ${n.title}`});r.appendChild(c);const u=J("p",["item-description"],n.description);i.appendChild(u);const p=J("span",["item-priority"],`Priority: ${n.priority}`);i.appendChild(p),t.classList.add(`prio${n.priority}`);const h="_no-project"==n.project?"":`Project: ${n.project}`,m=J("span",["item-project"],h);i.appendChild(m),t.appendChild(a),t.appendChild(r),t.appendChild(i),e.appendChild(t),t.addEventListener("click",(function(){V(this)})),o.addEventListener("click",(e=>{e.stopPropagation(),t.classList.toggle("done"),U(n)})),s.addEventListener("click",(e=>{e.stopPropagation(),t.classList.toggle("done"),U(n)})),c.addEventListener("click",(t=>{t.stopPropagation(),G(n)})),l.addEventListener("click",(t=>{t.stopPropagation(),K(n)})),m.addEventListener("click",(()=>Q("p",n.project)))}return e}(r.showTasks(t,e));n.appendChild(a),n.appendChild(i)},V=t=>t.classList.toggle("active"),R=()=>{const t=document.querySelector(".content-header");return t.classList.contains("all")?"all":t.classList.contains("p")?"p":void 0},U=t=>{r.setTaskDone(t)},G=t=>{r.deleteTask(t),"all"==R()?Q("all"):"p"==R()&&Q("p",t.project),B()},K=t=>{const e=document.querySelector(".container");e.classList.contains("hasForm")||(e.classList.add("hasForm"),e.appendChild(function(t){const e=c("form",["new-task-form"]),n=c("legend",null,`Edit ${t.title}`);e.appendChild(n);const a=new Image;a.src="./static/x.svg",e.appendChild(a),a.addEventListener("click",(()=>H()));const i=c("label",null,"Task Name",{for:"new-task-name"}),o=c("input",["new-task-input","form-input"],null,{id:"new-task-name",required:"true",type:"text",name:"title",value:t.title,autocomplete:"off"});e.appendChild(i),e.appendChild(o);const s=c("p",["name-taken","error-message"],"This task name is already taken!",{id:"task-name-error"});s.style.display="none",e.appendChild(s);const d=c("label",null,"Description",{for:"new-task-description"}),l=c("textarea",["new-task-input","form-input"],t.description,{id:"new-task-description",rows:"6",name:"description",maxlength:"500"});e.appendChild(d),e.appendChild(l);const u=c("label",null,"Due Date",{for:"new-task-date"}),p=c("input",["new-task-input","form-input"],null,{id:"new-task-date",type:"date",name:"date",value:t.dueDate});e.appendChild(u),e.appendChild(p);const h=c("label",null,"Project",{for:"Project"}),m=c("select",["new-task-input","form-input"],null,{id:"new-task-project",name:"project",value:t.project}),f=r.getProjects(),g=c("option",null,"-- no project --",{value:"_no-project"});m.appendChild(g);for(let e of f)if("_no-project"!==e.title){const n=c("option",null,e.title,{value:e.title});e.title==t.project&&n.setAttribute("selected","selected"),m.appendChild(n)}e.appendChild(h),e.appendChild(m);const v=c("label",null,"Priority",{for:"new-task-priority"}),k=c("select",["new-task-input","form-input"],null,{id:"new-task-priority",name:"priority"});for(let e of[1,2,3]){const n=c("option",null,e,{value:e.toString()});e==t.priority&&n.setAttribute("selected","selected"),k.appendChild(n)}e.appendChild(v),e.appendChild(k);const b=c("button",["btn","new-task-btn"],"Add Task",{type:"submit",id:"new-task-btn"});return e.appendChild(b),e.addEventListener("submit",(e=>{e.preventDefault();const n=Object.fromEntries(new FormData(e.target));0==r.editTask(n,t)?s.style.display="block":(H(),"_no-project"==n.project?Q(null):Q(null,r.getProject(n.project)))})),e}(t)))},Z=t=>{r.deleteProject(t),Q("all"),B()},tt=()=>{const t=document.querySelectorAll(".hamburger"),e=document.querySelector(".sidebar");t.forEach((t=>t.classList.toggle("show"))),e.classList.toggle("show")};r.getList().projects.length||(console.log("no length"),r.addProject("_no-project")),Q("all"),B()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,